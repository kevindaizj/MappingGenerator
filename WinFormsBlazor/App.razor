@using System.Reflection;
@using System.Text;
@using WinFormsBlazor.Services;
@inject NotificationService _notice
@inject IMessageService _message


<Search Placeholder="Select Assembly"  @bind-Value="@assemblyPath" EnterButton="true" OnSearch="OpenFile" ReadOnly />
<br/><br/>

@if (!string.IsNullOrWhiteSpace(assemblyPath) && options != null )
{
    <GridRow Gutter="2">
        <GridCol Class="gutter-row" Span="11">
            <Select TItem="SelectOption"
                TItemValue="string"
                DataSource="@options"
                @bind-Value="@fromTypeName"
                LabelName="@nameof(SelectOption.Label)"
                ValueName="@nameof(SelectOption.Value)"
                Placeholder="From"
                DefaultActiveFirstOption="false"
                EnableSearch
                AllowClear>
            </Select>
        </GridCol>
        <GridCol Class="gutter-row" Span="2" style="text-align: center">
            <Button Icon="@IconType.Outline.Swap" Shape="circle" @onclick="Swap" />
        </GridCol>
        <GridCol Class="gutter-row" Span="11">
            <Select TItem="SelectOption"
                TItemValue="string"
                DataSource="@options"
                @bind-Value="@toTypeName"
                LabelName="@nameof(SelectOption.Label)"
                ValueName="@nameof(SelectOption.Value)"
                Placeholder="To"
                DefaultActiveFirstOption="false"
                EnableSearch
                AllowClear>
            </Select>
        </GridCol>
        
    </GridRow>

    <br />

    <Button Type="primary" @onclick="MapToInstance">Map to New</Button>
    <Button Type="primary" @onclick="MapToProp">Property mapping</Button>

    <br />

    <div style="margin-top: 5px; text-align: right">
        <Button @onclick="Copy" style="">
            <Icon Type="copy" Theme="outline" /> Copy
        </Button>
    </div>
    

    <div style="margin-top: 10px; width: 100%;  height: 430px">
        <StandaloneCodeEditor Id="my-editor-instance-id" ConstructionOptions="EditorConstructionOptions" />
    </div>
    
}




<br/>

<AntContainer />


@code {

    class SelectOption
    {
        public string Value { get; set; } = default!;
        public string Label { get; set; } = default!;
    }

    private string assemblyPath = string.Empty;

    private List<SelectOption>? options;

    private string? fromTypeName;

    private string? toTypeName;

    private string resultTxt = "hello world";

    private StandaloneCodeEditor? editor;

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        this.editor = editor;
        return new StandaloneEditorConstructionOptions
            {
                AutomaticLayout = true,
                Language = "csharp",
                Value = "",
                ReadOnly = true,
                Theme = "vs-dark",
                CodeLens = true,
            };
    }

    private void OpenFile()
    {
        var dialog = new OpenFileDialog();
        dialog.Filter = "Dll Files (*.dll)|*.dll|All files(*.*)|*.*";
        dialog.RestoreDirectory = true;

        var result = dialog.ShowDialog();
        if (result == System.Windows.Forms.DialogResult.OK)
        {
            assemblyPath = dialog.FileName;

            var asm = Assembly.LoadFrom(assemblyPath);
            var types = asm.GetTypes().Where(t => t.IsClass).ToList();
            options = types.Select(t => new SelectOption { Label = $"{t.Name!} ({string.Join('.', t.FullName!.Split(".").SkipLast(1))})", Value = t.FullName! }).ToList();

        }
    }

    private void Swap()
    {
        (this.toTypeName, this.fromTypeName) = (this.fromTypeName, this.toTypeName);
    }

    public async Task MapToInstance()
    {
        resultTxt = string.Empty;

        if (string.IsNullOrWhiteSpace(assemblyPath) || string.IsNullOrWhiteSpace(toTypeName))
        {
            await Notifiy(NotificationType.Error, "To类型必填");
            return;
        }

        this.resultTxt = MappingService.MapToInstace(assemblyPath, fromTypeName, toTypeName);
        await editor!.SetValue(this.resultTxt);
    }

    public async Task MapToProp()
    {
        resultTxt = string.Empty;

        if (string.IsNullOrWhiteSpace(assemblyPath) || string.IsNullOrWhiteSpace(toTypeName))
        {
            await Notifiy(NotificationType.Error, "To类型必填");
            return;
        }

        this.resultTxt = MappingService.MapToProperties(assemblyPath, fromTypeName, toTypeName);
        await editor!.SetValue(this.resultTxt);
    }

    public async Task Copy()
    {
        var text = await editor!.GetValue();
        if (!string.IsNullOrWhiteSpace(text))
        {
            Clipboard.SetDataObject(text);
            await _message.Success("Copied");
        }
    }

    private async Task Notifiy(NotificationType type, string msg)
    {
        await _notice.Open(new NotificationConfig()
            {
                Message = type.ToString(),
                Description = msg,
                NotificationType = type
            });
    }

    
}

